(ns inflections.test.core
  (:require [inflections.core :refer [init-inflections camelize capitalize dasherize demodulize foreign-key]]
            [inflections.core :refer [hyphenize irregular? ordinalize parameterize plural pluralize singular]]
            [inflections.irregular :refer [*irregular-words*]]
            [inflections.uncountable :refer [*uncountable-words*]]))

(defn test-camelize []
  ;; (assert (nil? (camelize nil)))
  ;; (assert (= "" (camelize "")))
  ;; (assert (= "active_record" (camelize "ActiveRecord")))
  ;; (assert (= 'active_record (camelize 'ActiveRecord)))
  ;; (assert (= :active_record (camelize :ActiveRecord)))
  ;; (assert (= "active_record/errors" (camelize "ActiveRecord::Errors")))
  ;; (assert (= 'active_record/errors (camelize 'Errors)))
  ;; (assert (= :active_record/errors (camelize :Errors)))
  )

(defn test-capitalize []
  (assert (nil? (capitalize nil)))
  (assert (= "" (capitalize "")))
  (assert (= (capitalize "hello") "Hello"))
  (assert (= (capitalize "HELLO") "Hello" ))
  (assert (= (capitalize "123ABC") "123abc")))

(defn test-dasherize []
  (assert (= nil (dasherize nil)))
  (assert (= "" (dasherize "")))
  (assert (= "street" (dasherize "street")))
  (assert (= "iso-3166-alpha-2" (dasherize "iso_3166_alpha_2"))))

(defn test-demodulize []
  (assert (= nil (demodulize nil)))
  (assert (= "" (demodulize "")))
  (assert (= "MyRecord" (demodulize "inflections.MyRecord")))
  (assert (= "Inflections" (demodulize "Inflections")))
  (assert (= "String" (demodulize "ActiveRecord::CoreExtensions::String"))))

(defn test-foreign-key []
  (assert (nil? (foreign-key nil)))
  (assert (nil? (foreign-key "")))
  (assert (= "message_id" (foreign-key "Message")))
  (assert (= "post_id" (foreign-key "Admin::Post")))
  (assert (= "account_id" (foreign-key "MyApplication::Billing::Account")))
  (assert (= "account-id" (foreign-key "MyApplication::Billing::Account" "-"))))

(defn test-hyphenize []
  (assert (= nil (hyphenize nil)))
  (assert (= "" (hyphenize "")))
  (assert (= "street" (hyphenize "street")))
  (assert (= "street-address" (hyphenize "streetAddress")))
  (assert (= "iso-3166-alpha-2" (hyphenize "iso_3166_alpha_2"))))

(defn test-irregular? []
  (assert (not (empty? @*irregular-words*)))
  (assert (every? irregular? @*irregular-words*))
  (assert (every? irregular? (map keyword @*irregular-words*)))
  (assert (every? irregular? (map symbol @*irregular-words*))))

(defn test-ordinalize []
  (assert (= nil (ordinalize nil)))
  (assert (= "0th" (ordinalize "0")))
  (assert (= "1st" (ordinalize "1")))
  (assert (= "2nd" (ordinalize "2")))
  (assert (= "3rd" (ordinalize "3")))
  (assert (= "4th" (ordinalize "4")))
  (assert (= "5th" (ordinalize "5")))
  (assert (= "6th" (ordinalize "6")))
  (assert (= "7th" (ordinalize "7")))
  (assert (= "8th" (ordinalize "8")))
  (assert (= "9th" (ordinalize "9")))
  (assert (= "10th" (ordinalize "10")))
  (assert (= "11th" (ordinalize "11")))
  (assert (= "12th" (ordinalize "12")))
  (assert (= "13th" (ordinalize "13")))
  (assert (= "14th" (ordinalize "14")))
  (assert (= "20th" (ordinalize "20")))
  (assert (= "21st" (ordinalize "21")))
  (assert (= "22nd" (ordinalize "22")))
  (assert (= "23rd" (ordinalize "23")))
  (assert (= "24th" (ordinalize "24")))
  (assert (= "100th" (ordinalize "100")))
  (assert (= "101st" (ordinalize "101")))
  (assert (= "102nd" (ordinalize "102")))
  (assert (= "103rd" (ordinalize "103")))
  (assert (= "104th" (ordinalize "104")))
  (assert (= "110th" (ordinalize "110")))
  (assert (= "111th" (ordinalize "111")))
  (assert (= "112th" (ordinalize "112")))
  (assert (= "113th" (ordinalize "113")))
  (assert (= "1000th" (ordinalize "1000")))
  (assert (= "1001st" (ordinalize "1001")))
  (assert (= "0th" (ordinalize 0)))
  (assert (= "1st" (ordinalize 1)))
  (assert (= "2nd" (ordinalize 2)))
  (assert (= "3rd" (ordinalize 3)))
  (assert (= "4th" (ordinalize 4)))
  (assert (= "5th" (ordinalize 5)))
  (assert (= "6th" (ordinalize 6)))
  (assert (= "7th" (ordinalize 7)))
  (assert (= "8th" (ordinalize 8)))
  (assert (= "9th" (ordinalize 9)))
  (assert (= "10th" (ordinalize 10)))
  (assert (= "11th" (ordinalize 11)))
  (assert (= "12th" (ordinalize 12)))
  (assert (= "13th" (ordinalize 13)))
  (assert (= "14th" (ordinalize 14)))
  (assert (= "20th" (ordinalize 20)))
  (assert (= "21st" (ordinalize 21)))
  (assert (= "22nd" (ordinalize 22)))
  (assert (= "23rd" (ordinalize 23)))
  (assert (= "24th" (ordinalize 24)))
  (assert (= "100th" (ordinalize 100)))
  (assert (= "101st" (ordinalize 101)))
  (assert (= "102nd" (ordinalize 102)))
  (assert (= "103rd" (ordinalize 103)))
  (assert (= "104th" (ordinalize 104)))
  (assert (= "110th" (ordinalize 110)))
  (assert (= "111th" (ordinalize 111)))
  (assert (= "112th" (ordinalize 112)))
  (assert (= "113th" (ordinalize 113)))
  (assert (= "1000th" (ordinalize 1000)))
  (assert (= "1001st" (ordinalize 1001))))

(defn test-parameterize []
  (assert (= "donald-e-knuth" (parameterize "Donald E. Knuth")))
  (assert (= "random-text-with-bad-characters" (parameterize "Random text with *(bad)* characters")))
  (assert (= "trailing-bad-characters" (parameterize "Trailing bad characters!@#")))
  (assert (= "leading-bad-characters" (parameterize "!@#Leading bad characters")))
  (assert (= "squeeze-separators" (parameterize "Squeeze separators")))
  (assert (= "dasherize-underscores" (parameterize "dasherize_underscores")))
  (assert (= "test-with-sign" (parameterize "Test with + sign")))
  (assert (= "test-with-malformed-utf8" (parameterize "Test with malformed utf8 \251"))))


(defn test-plural []
  (assert (= " " (plural " ")))
  (assert (= "" (plural "")))
  (assert (= "abilities" (plural "ability")))
  (assert (= "addresses" (plural "address")))
  (assert (= "amenities" (plural "amenity")))
  (assert (= "agencies" (plural "agency")))
  (assert (= "aliases" (plural "alias")))
  (assert (= "analyses" (plural "analysis")))
  (assert (= "archives" (plural "archive")))
  (assert (= "axes" (plural "axis")))
  (assert (= "bases" (plural "basis")))
  (assert (= "boxes" (plural "box")))
  (assert (= "buffaloes" (plural "buffalo")))
  (assert (= "buses" (plural "bus")))
  (assert (= "cases" (plural "case")))
  (assert (= "categories" (plural "category")))
  (assert (= "comments" (plural "comment")))
  (assert (= "crises" (plural "crisis")))
  (assert (= "databases" (plural "database")))
  (assert (= "data" (plural "datum")))
  (assert (= "days" (plural "day")))
  (assert (= "diagnoses" (plural "diagnosis")))
  (assert (= "diagnosis_as" (plural "diagnosis_a")))
  (assert (= "dwarves" (plural "dwarf")))
  (assert (= "edges" (plural "edge")))
  (assert (= "elves" (plural "elf")))
  (assert (= "fixes" (plural "fix")))
  (assert (= "foobars" (plural "foobar")))
  (assert (= "halves" (plural "half")))
  (assert (= "horses" (plural "horse")))
  (assert (= "houses" (plural "house")))
  (assert (= "indices" (plural "index")))
  (assert (= "lice" (plural "louse")))
  (assert (= "matrices" (plural "matrix")))
  (assert (= "matrix_fus" (plural "matrix_fu")))
  (assert (= "media" (plural "medium")))
  (assert (= "mice" (plural "mouse")))
  (assert (= "moves" (plural "move")))
  (assert (= "movies" (plural "movie")))
  (assert (= "newsletters" (plural "newsletter")))
  (assert (= "octopi" (plural "octopus")))
  (assert (= "oxen" (plural "ox")))
  (assert (= "perspectives" (plural "perspective")))
  (assert (= "photos" (plural "photo")))
  (assert (= "portfolios" (plural "portfolio")))
  (assert (= "prizes" (plural "prize")))
  (assert (= "processes" (plural "process")))
  (assert (= "queries" (plural "query")))
  (assert (= "quizzes" (plural "quiz")))
  (assert (= "saves" (plural "safe")))
  (assert (= "searches" (plural "search")))
  (assert (= "shoes" (plural "shoe")))
  (assert (= "stacks" (plural "stack")))
  (assert (= "statuses" (plural "status")))
  (assert (= "status_codes" (plural "status_code")))
  (assert (= "switches" (plural "switch")))
  (assert (= "testes" (plural "testis")))
  (assert (= "tomatoes" (plural "tomato")))
  (assert (= "vertices" (plural "vertex")))
  (assert (= "viri" (plural "virus")))
  (assert (= "wives" (plural "wife")))
  (assert (= "wishes" (plural "wish"))))

(defn test-plural-with-irregular-words []
  (assert (= "amenities" (plural "amenity")))
  (assert (= "children" (plural "child")))
  (assert (= "kine" (plural "cow")))
  (assert (= "feet" (plural "foot")))
  (assert (= "lice" (plural "louse")))
  (assert (= "mailmen" (plural "mailman")))
  (assert (= "men" (plural "man")))
  (assert (= "mice" (plural "mouse")))
  (assert (= "moves" (plural "move")))
  (assert (= "oxen" (plural "ox")))
  (assert (= "people" (plural "person")))
  (assert (= "sexes" (plural "sex")))
  (assert (= "teeth" (plural "tooth")))
  (assert (= "women" (plural "woman"))))

(defn test-plural-with-uncountable-words []
  (doseq [word @*uncountable-words*]
    (assert (= word (plural word)))))

(defn test-pluralize []
  (assert (= "2 users" (pluralize 2 "person" "users")))
  (assert (= "0 people" (pluralize 0 "person")))
  (assert (= "1 person" (pluralize 1 "person")))
  (assert (= "2 people" (pluralize 2 "person"))))

(defn test-singular []
  (assert (= " " (singular " ")))
  (assert (= "" (singular "")))
  (assert (= "ability" (singular "abilities")))
  (assert (= "address" (singular "addresses")))
  (assert (= "agency" (singular "agencies")))
  (assert (= "alias" (singular "aliases")))
  (assert (= "amenity" (singular "amenities")))
  (assert (= "analysis" (singular "analyses")))
  (assert (= "archive" (singular "archives")))
  (assert (= "axis" (singular "axes")))
  (assert (= "basis" (singular "bases")))
  (assert (= "box" (singular "boxes")))
  (assert (= "buffalo" (singular "buffaloes")))
  (assert (= "bus" (singular "buses")))
  (assert (= "case" (singular "cases")))
  (assert (= "category" (singular "categories")))
  (assert (= "comment" (singular "comments")))
  (assert (= "crisis" (singular "crises")))
  (assert (= "database" (singular "databases")))
  (assert (= "datum" (singular "data")))
  (assert (= "day" (singular "days")))
  (assert (= "diagnosis" (singular "diagnoses")))
  (assert (= "dwarf" (singular "dwarves")))
  (assert (= "edge" (singular "edges")))
  (assert (= "elf" (singular "elves")))
  (assert (= "experience" (singular "experiences")))
  (assert (= "fix" (singular "fixes")))
  (assert (= "foobar" (singular "foobars")))
  (assert (= "half" (singular "halves")))
  (assert (= "horse" (singular "horses")))
  (assert (= "house" (singular "houses")))
  (assert (= "index" (singular "indices")))
  (assert (= "louse" (singular "lice")))
  (assert (= "matrix" (singular "matrices")))
  (assert (= "medium" (singular "media")))
  (assert (= "mouse" (singular "mice")))
  (assert (= "movie" (singular "movies")))
  (assert (= "newsletter" (singular "newsletters")))
  (assert (= "octopus" (singular "octopi")))
  (assert (= "ox" (singular "oxen")))
  (assert (= "perspective" (singular "perspectives")))
  (assert (= "photo" (singular "photos")))
  (assert (= "portfolio" (singular "portfolios")))
  (assert (= "prize" (singular "prizes")))
  (assert (= "process" (singular "processes")))
  (assert (= "query" (singular "queries")))
  (assert (= "quiz" (singular "quizzes")))
  (assert (= "safe" (singular "saves")))
  (assert (= "search" (singular "searches")))
  (assert (= "shoe" (singular "shoes")))
  (assert (= "stack" (singular "stacks")))
  (assert (= "status" (singular "statuses")))
  (assert (= "switch" (singular "switches")))
  (assert (= "testis" (singular "testes")))
  (assert (= "tomato" (singular "tomatoes")))
  (assert (= "vertex" (singular "vertices")))
  (assert (= "virus" (singular "viri")))
  (assert (= "wife" (singular "wives")))
  (assert (= "wish" (singular "wishes")))
  (assert (= "weather" (singular "weather"))))

(defn test []
  (init-inflections)
  (test-camelize)
  (test-capitalize)
  (test-dasherize)
  (test-demodulize)
  (test-foreign-key)
  (test-hyphenize)
  (test-irregular?)
  (test-ordinalize)
  (test-parameterize)
  (test-plural)
  (test-plural-with-irregular-words)
  (test-plural-with-uncountable-words)
  (test-pluralize)
  (test-singular))
