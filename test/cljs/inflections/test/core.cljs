(ns inflections.test.core
  (:require [inflections.core :refer [init-inflections camelize capitalize dasherize demodulize foreign-key]]
            [inflections.core :refer [hyphenize irregular? ordinalize]]
            [inflections.irregular :refer [*irregular-words*]]))

(defn test-camelize []
  ;; (assert (nil? (camelize nil)))
  ;; (assert (= "" (camelize "")))
  ;; (assert (= "active_record" (camelize "ActiveRecord")))
  ;; (assert (= 'active_record (camelize 'ActiveRecord)))
  ;; (assert (= :active_record (camelize :ActiveRecord)))
  ;; (assert (= "active_record/errors" (camelize "ActiveRecord::Errors")))
  ;; (assert (= 'active_record/errors (camelize 'Errors)))
  ;; (assert (= :active_record/errors (camelize :Errors)))
  )

(defn test-capitalize []
  (assert (nil? (capitalize nil)))
  (assert (= "" (capitalize "")))
  (assert (= (capitalize "hello") "Hello"))
  (assert (= (capitalize "HELLO") "Hello" ))
  (assert (= (capitalize "123ABC") "123abc")))

(defn test-dasherize []
  (assert (= nil (dasherize nil)))
  (assert (= "" (dasherize "")))
  (assert (= "street" (dasherize "street")))
  (assert (= "iso-3166-alpha-2" (dasherize "iso_3166_alpha_2"))))

(defn test-demodulize []
  (assert (= nil (demodulize nil)))
  (assert (= "" (demodulize "")))
  (assert (= "MyRecord" (demodulize "inflections.MyRecord")))
  (assert (= "Inflections" (demodulize "Inflections")))
  (assert (= "String" (demodulize "ActiveRecord::CoreExtensions::String"))))

(defn test-foreign-key []
  (assert (nil? (foreign-key nil)))
  (assert (nil? (foreign-key "")))
  (assert (= "message_id" (foreign-key "Message")))
  (assert (= "post_id" (foreign-key "Admin::Post")))
  (assert (= "account_id" (foreign-key "MyApplication::Billing::Account")))
  (assert (= "account-id" (foreign-key "MyApplication::Billing::Account" "-"))))

(defn test-hyphenize []
  (assert (= nil (hyphenize nil)))
  (assert (= "" (hyphenize "")))
  (assert (= "street" (hyphenize "street")))
  (assert (= "street-address" (hyphenize "streetAddress")))
  (assert (= "iso-3166-alpha-2" (hyphenize "iso_3166_alpha_2"))))

(defn test-irregular? []
  (assert (not (empty? @*irregular-words*)))
  (assert (every? irregular? @*irregular-words*))
  (assert (every? irregular? (map keyword @*irregular-words*)))
  (assert (every? irregular? (map symbol @*irregular-words*))))

(defn test-ordinalize []
  (assert (= nil (ordinalize nil)))
  (assert (= "0th" (ordinalize "0")))
  (assert (= "1st" (ordinalize "1")))
  (assert (= "2nd" (ordinalize "2")))
  (assert (= "3rd" (ordinalize "3")))
  (assert (= "4th" (ordinalize "4")))
  (assert (= "5th" (ordinalize "5")))
  (assert (= "6th" (ordinalize "6")))
  (assert (= "7th" (ordinalize "7")))
  (assert (= "8th" (ordinalize "8")))
  (assert (= "9th" (ordinalize "9")))
  (assert (= "10th" (ordinalize "10")))
  (assert (= "11th" (ordinalize "11")))
  (assert (= "12th" (ordinalize "12")))
  (assert (= "13th" (ordinalize "13")))
  (assert (= "14th" (ordinalize "14")))
  (assert (= "20th" (ordinalize "20")))
  (assert (= "21st" (ordinalize "21")))
  (assert (= "22nd" (ordinalize "22")))
  (assert (= "23rd" (ordinalize "23")))
  (assert (= "24th" (ordinalize "24")))
  (assert (= "100th" (ordinalize "100")))
  (assert (= "101st" (ordinalize "101")))
  (assert (= "102nd" (ordinalize "102")))
  (assert (= "103rd" (ordinalize "103")))
  (assert (= "104th" (ordinalize "104")))
  (assert (= "110th" (ordinalize "110")))
  (assert (= "111th" (ordinalize "111")))
  (assert (= "112th" (ordinalize "112")))
  (assert (= "113th" (ordinalize "113")))
  (assert (= "1000th" (ordinalize "1000")))
  (assert (= "1001st" (ordinalize "1001")))
  (assert (= "0th" (ordinalize 0)))
  (assert (= "1st" (ordinalize 1)))
  (assert (= "2nd" (ordinalize 2)))
  (assert (= "3rd" (ordinalize 3)))
  (assert (= "4th" (ordinalize 4)))
  (assert (= "5th" (ordinalize 5)))
  (assert (= "6th" (ordinalize 6)))
  (assert (= "7th" (ordinalize 7)))
  (assert (= "8th" (ordinalize 8)))
  (assert (= "9th" (ordinalize 9)))
  (assert (= "10th" (ordinalize 10)))
  (assert (= "11th" (ordinalize 11)))
  (assert (= "12th" (ordinalize 12)))
  (assert (= "13th" (ordinalize 13)))
  (assert (= "14th" (ordinalize 14)))
  (assert (= "20th" (ordinalize 20)))
  (assert (= "21st" (ordinalize 21)))
  (assert (= "22nd" (ordinalize 22)))
  (assert (= "23rd" (ordinalize 23)))
  (assert (= "24th" (ordinalize 24)))
  (assert (= "100th" (ordinalize 100)))
  (assert (= "101st" (ordinalize 101)))
  (assert (= "102nd" (ordinalize 102)))
  (assert (= "103rd" (ordinalize 103)))
  (assert (= "104th" (ordinalize 104)))
  (assert (= "110th" (ordinalize 110)))
  (assert (= "111th" (ordinalize 111)))
  (assert (= "112th" (ordinalize 112)))
  (assert (= "113th" (ordinalize 113)))
  (assert (= "1000th" (ordinalize 1000)))
  (assert (= "1001st" (ordinalize 1001))))

(defn test []
  (init-inflections)
  (test-camelize)
  (test-capitalize)
  (test-dasherize)
  (test-demodulize)
  (test-foreign-key)
  (test-hyphenize)
  (test-irregular?)
  (test-ordinalize))
